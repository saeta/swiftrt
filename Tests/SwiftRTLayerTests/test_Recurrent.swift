//******************************************************************************
// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import XCTest
import Foundation
import SwiftRT

let ndim = 3
let sentence = "look there's a boy with his hat"

let initialLSTMCellFusedWeights = array(
        [[ -0.10264638,    0.5724375,   0.27309537,   0.17255026,  -0.47668853,    0.4770379,
           -0.33398324,    0.5318817,   0.14245105,   0.29648793,   0.51910985,   -0.3606615],
         [ -0.12656957,  -0.50218564,   0.23851442,   0.56842005, -0.032798648,   -0.4720018,
           -0.06218469,  -0.48546985,  -0.41528985,   0.19846004,   0.39093566,   -0.3098252],
         [  0.45832455,   -0.3720271,  -0.10000759,  -0.27497253,   -0.5491783,   -0.3697677,
            0.033266246,  -0.46082756,   0.31556267,   0.41334385,  -0.08878037,  -0.38898242],
         [  0.05400765,  -0.41349488,  -0.10776892,   -0.2313253,  0.114721656,   0.40440345,
            0.5117364,   -0.5681195,   -0.5347471,  -0.25832775,   0.43469727, -0.093170345],
         [ -0.24448833,   0.41439235,  -0.40069306,    0.2501257,   0.20772547,  -0.02735293,
           -0.011522472,  -0.47641352,  -0.57396966,    0.5580311,   0.13775468,   -0.4013645],
         [  0.33192658,   0.21302766,  -0.49628606,  0.113090396,   0.27634227,   0.49463975,
            0.103300214,    0.2272774,  -0.07694018,    -0.463426,   0.16690546,    0.2600751]])

class test_Recurrent: XCTestCase {
    // support terminal test run
    static var allTests = [
        ("test_LSTMEncoder", test_LSTMEncoder),
    ]

    //--------------------------------------------------------------------------
    func test_Embedding() {
        let vocabSize = 4
        let encoder = Embedding<Float>(
                vocabularySize: vocabSize,
                embeddingSize: ndim,
                embeddingsInitializer: {
                    array(0..<($0[0] * $0[1]), ($0[0], $0[1]))
                })
        let sequence = array([1, 3], type: DeviceIndex.self)
        let embedded = encoder(sequence)
        XCTAssert(embedded == [
            [3.0, 4.0, 5.0],
            [9.0, 10.0, 11.0]
        ])
    }
    
    //--------------------------------------------------------------------------
    func test_LSTMEncoder() {
//        var lstmEncoder = LSTM<Float>(LSTMCell(inputSize: ndim, hiddenSize: ndim))
//        XCTAssert(lstmEncoder.cell.fusedWeight.shape == [6, 12])
//        print(lstmEncoder.cell.fusedWeight)
//
//        // set known weights for reproducability
//        lstmEncoder.cell.fusedWeight = initialLSTMCellFusedWeights
//
//        print(lstmEncoder.cell.fusedWeight.shape)
//        print(lstmEncoder.cell.fusedBias)

        // Swaps the columns corresponding to "forget" and "update" gates.
        //
        // This translates between the keras ordering
        //   [input | forget | update | output]
        // and the swift-apis ordering
        //   [input | update | forget | output]
        func swapForgetUpdate<Rank>(_ t: Tensor<Rank, Float>) -> Tensor<Rank, Float> {
            // S4TF implementation for reference:
            // var split = t.split(count: 4, alongAxis: -1)
            // split.swapAt(1, 2)
            // return Tensor(concatenating: split, alongAxis: -1)
            Tensor(zeros: t.shape)  // TODO: Implement me!
        }

        var lstm = LSTM<Float>(LSTMCell(inputSize: 4, hiddenSize: 4))
        lstm.cell.fusedWeight = swapForgetUpdate(Tensor(concatenating: kernel, recurrentKernel))
        lstm.cell.fusedBias = swapForgetUpdate(bias)

        let inputs = x
        let initialState = LSTMCell<Float>.State(cell: initialStateCell, hidden: initialStateHidden)

        let outputs = lstm(inputs, initialState: initialState)
        XCTAssertEqual(outputs.count, 4)
        // assertEqual(Tensor(concatenating: outputs.map { $0.hidden }),
        //             expectedStates,
        //             accuracy: 1e-6)
    }

    // VALUES BELOW COPIED FROM https://github.com/tensorflow/swift-apis/blob/feb9d97542606a0c855e110b8d6c1269660f8c51/Tests/TensorFlowTests/LayerTests.swift#L1603
    private let kernel = array(
        [
            [
            0.4545238, 0.17410219, 0.07151973, -0.043370485, -0.08141422, -0.23986903,
            0.2063713, 0.17585361, 0.4534099, -0.5096329, 0.2199418, -0.2149244,
            0.23440659, 0.43826634, -0.13891399, -0.17842606,
            ],
            [
            -0.3797379, 0.079282284, -0.10015741, -0.3239718, -0.27132228, 0.39218837,
            -0.43364745, -0.34852988, 0.2132551, -0.5461597, -0.048002183, 0.26265675,
            -0.18781787, -0.41067505, -0.051611483, 0.4885484,
            ],
            [
            -0.06933203, 0.54473567, -0.21874839, -0.49106207, -0.071650594, -0.08455315,
            0.5346174, 0.057993293, -0.13344201, -0.48908734, -0.058430463, -0.15182033,
            0.03391558, 0.009597003, 0.273346, -0.49635035,
            ],
            [
            -0.07164055, 0.37893647, -0.108646095, 0.07596207, 0.31213146, -0.3623113,
            -0.20532963, -0.302337, -0.26968825, 0.4479969, -0.085390985, 0.2579115,
            0.2743805, -0.21505526, -0.31751555, -0.44200268,
            ],
        ]
    )

    private let recurrentKernel = array(
        [
            [
            0.001444459, -0.44615534, 0.17120321, 0.028076064, -0.36675194, -0.37769908,
            -0.038331404, -0.3308463, 0.18919824, 0.21540813, 0.21875387, -0.17696984,
            0.24726436, -0.2989273, 0.26229933, 0.045673575,
            ],
            [
            -0.0060651056, -0.010614913, -0.41048288, -0.16720156, -0.042991478,
            -0.034523666, -0.22591552, -0.46458426, -0.15950868, 0.0032770582,
            0.02271657, 0.26582226, -0.38004795, 0.21254668, 0.35087258, 0.35231543,
            ],
            [
            -0.2352461, -0.12130469, -0.19648746, 0.29172993, 0.10191456, -0.2919168,
            -0.1870388, 0.2183716, 0.34960067, -0.24624759, 0.3270614, 0.4467347,
            0.11563631, 0.2551108, 0.06388308, -0.2366966,
            ],
            [
            -0.36797202, 0.21800567, -0.06400205, 0.43761855, 0.1086247, 0.3239568,
            -0.23723324, -0.07836083, -0.10523385, 0.34244883, 0.11385839, -0.15765572,
            0.42096126, 0.08826415, 0.10015068, 0.28478572,
            ],
        ]
    )

    private let bias = array(
        [0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
    )

    /*
    private let x = array(
        [
            [
                [-0.6346513, -0.43788078, -0.40050998, -0.35219777],
                [-0.59232813, -0.728384, -0.22974151, 0.3288936],
                [0.5766824, -0.5468713, 0.16438323, 0.6741958],
                [-0.47952235, -0.24399251, 0.8553043, 0.8588342],
            ]
        ]
    )
    */
    private let x = [
        array([[-0.6346513, -0.43788078, -0.40050998, -0.35219777]]),
        array([[-0.59232813, -0.728384, -0.22974151, 0.3288936]]),
        array([[0.5766824, -0.5468713, 0.16438323, 0.6741958]]),
        array([[-0.47952235, -0.24399251, 0.8553043, 0.8588342]]),
        
    ]

    private let initialStateHidden = array(
        [[0.9577427, -0.7377565, 0.35953724, -0.5784317]]
    )

    private let initialStateCell = array(
        [[-0.905442, -0.95177335, -0.05345559, -1.0015926]]
    )

    private let expectedStates = array(
        [
            [
                [-0.24107721, -0.17449945, 0.037506927, -0.30990827],
                [-0.26881245, -0.00634476, -0.019400658, -0.2071909],
                [-0.2842662, 0.032890536, -0.015112571, -0.13682269],
                [-0.31182146, 0.08775673, -0.072591506, -0.07358349],
            ]
        ]
    )

    private let expectedOutput = array(
        [[-0.7036462, 0.19863679, -0.14904207, -0.25543863]]
    )

    private let expectedGradKernel = array(
        [
            [
            0.0805003, -0.08275342, 0.03522955, -0.030312482, 0.11720966, 0.07540316,
            -0.0023639323, 0.10740622, -0.2532557, -0.16903767, -0.5353516, -0.3493193,
            0.016285714, 0.008904671, -0.003577555, -0.006157878,
            ],
            [
            0.08940101, -0.095668815, 0.032129567, -0.013392258, 0.17761931, 0.071601115,
            -0.000029361108, 0.17159097, -0.78527546, -0.5366851, -0.898436, -0.68411684,
            0.05064467, 0.0044404613, 0.0010539321, 0.022477672,
            ],
            [
            -0.124524735, 0.014374042, -0.065310925, 0.04207304, -0.018112179,
            0.054847445, -0.0053864224, -0.044751726, 0.12626463, 0.57195514, 0.0789956,
            0.21590737, 0.010621901, 0.0052103405, -0.0023645863, -0.00021189498,
            ],
            [
            -0.1812453, 0.07054679, -0.08742681, 0.046577554, -0.10540785, 0.021182634,
            -0.002338124, -0.14174302, 0.6233163, 0.88522494, 0.5829264, 0.6225763,
            -0.026014743, 0.0054547004, -0.0054682456, -0.018445207,
            ],
        ]
    )

    private let expectedGradRecurrentKernel = array(
        [
            [
            0.109804794, -0.006917909, 0.06479619, -0.02927, -0.07282017, -0.06949664,
            -0.007851637, -0.0064141527, 0.01585731, -0.27055892, 0.18191284,
            -0.036890596, 0.00081066974, -0.012041213, 0.008538903, 0.004745292,
            ],
            [
            -0.022427287, -0.037062988, -0.021642044, 0.009100201, 0.113654904,
            0.07015832, 0.00417687, 0.073882714, -0.31279865, -0.057589047, -0.4670751,
            -0.2540243, 0.019137694, 0.008957855, -0.004623856, 0.005064313,
            ],
            [
            0.015348908, 0.013859384, 0.012477149, -0.0050131185, -0.050523866,
            -0.031698443, -0.0024695867, -0.0299116, 0.12353469, 0.012106655, 0.19668634,
            0.0989304, -0.0068828184, -0.0043967483, 0.0024977797, -0.001459891,
            ],
            [
            0.024811182, -0.05493941, 0.0018467754, -0.001980858, 0.1320867, 0.06232968,
            0.0034385736, 0.10646886, -0.46687102, -0.2663457, -0.5953469, -0.4029197,
            0.02738668, 0.0066831633, -0.0024504992, 0.010666027,
            ],
        ]
    )

    private let expectedGradBias = array(
         [
            -0.2057409, 0.18275242, -0.07681093, 0.042995583, -0.3810982, -0.12361911,
            -0.008955841, -0.3550135, 1.5545796, 1.3119538, 1.8124579, 1.4128002,
            -0.08343395, -0.010454425, 0.0008502216, -0.038896702,
        ]
    )

    private let expectedGradX = array(
        [
            [
            [0.21591075, 0.11293747, -0.13014226, -0.022586256],
            [0.08480768, 0.13718912, -0.12702335, 0.077232406],
            [0.01666388, 0.0068455637, -0.35854548, 0.1287557],
            [-0.2761167, -0.088074416, -0.415294, 0.32159615],
            ]
        ]
    )

    let expectedGradInitialStateHidden = array(
          [[0.25400645, 0.07120966, 0.36865664, -0.05423181]]
    )
    let expectedGradInitialStateCell = array(
          [[0.48873883, 0.23135301, 0.6608742, 0.37556332]]
    )
}
